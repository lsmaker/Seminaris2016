# -*- mode: ruby -*-
# vi: set ft=ruby :

required_plugins = %w(vagrant-vbguest)
required_plugins.each do |plugin|
  system "vagrant plugin install #{plugin}" unless Vagrant.has_plugin? plugin
end

#This scripts handles the problem of ignoring the log files on the
#code repository. It will check for the required log files each time
#the Vagrant VM is started and if they don't exist they will be automatically
#created. However, if they exist, they will be CLEARED to save space on virtual
#machine's disk.
$script = <<SCRIPT
  echo "Shutting down Nginx...";
  sudo service nginx stop > /dev/null 2>&1;
  echo "Creating/Clearing required log files..."
  if [ ! -f /var/log/nginx/error.log ]; then
    mkdir -p /var/log > /dev/null 2>&1;
    touch /var/log/nginx/error.log > /dev/null 2>&1;
  else
    echo "" > /var/log/nginx/error.log;
  fi

  if [ ! -f /var/log/nginx/access.log ]; then
    mkdir -p /var/log/nginx > /dev/null 2>&1;
    touch /var/log/nginx/access.log > /dev/null 2>&1;
  else 
    echo "" > /var/log/nginx/access.log;
  fi

  if [ ! -f /var/log/lsmaker.error.log ]; then
    mkdir -p /var/log > /dev/null 2>&1;
    touch /var/log/lsmaker.error.log > /dev/null 2>&1;
  else
    echo "" > /var/log/lsmaker.error.log; 
  fi

  if [ ! -f /var/log/lsmaker.access.log ]; then
    mkdir -p /var/log > /dev/null 2>&1;
    touch /var/log/lsmaker.access.log > /dev/null 2>&1;
  else
    echo "" > /var/log/lsmaker.access.log;
  fi
  echo "Starting Nginx...";
  sudo service nginx start;
SCRIPT

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "debian/jessie64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = true

  #Configure virtual machine's (guest) hostname
  config.vm.hostname = "lsmaker-dev"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 80, host: 3000

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.56.101"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./src/logs", "/var/log",create: true, owner: "vagrant", group: "www-data", mount_options: ["dmode=775,fmode=664"]
  config.vm.synced_folder "./src/www", "/var/www",create: true, owner: "vagrant", group: "www-data", mount_options: ["dmode=775,fmode=664"]
  config.vm.synced_folder ".", "/vagrant", disabled: true

  #Upload provision folder from host to guest machine
  config.vm.provision :file, source: './.provision', destination: "/tmp/provision"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:

    config.vm.provider "virtualbox" do |vb|

	  # Display the VirtualBox GUI when booting the machine
      vb.gui = false

      # Customize the amount of memory on the VM:
      vb.memory = "1024"

	  # Configure Virtual Machine name
	  vb.name = "lsmaker-dev"

    end

  # View the documentation for the provider you are using for more
  # information on available options.
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: "sudo bash /tmp/provision/setup.sh"
   config.vm.provision "shell", inline: $script, run: "always"

end
